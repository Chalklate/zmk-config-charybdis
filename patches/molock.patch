diff --git a/app/CMakeLists.txt b/app/CMakeLists.txt
index 0891364b437..02de9443525 100644
--- a/app/CMakeLists.txt
+++ b/app/CMakeLists.txt
@@ -47,6 +47,7 @@ if ((NOT CONFIG_ZMK_SPLIT) OR CONFIG_ZMK_SPLIT_ROLE_CENTRAL)
   target_sources(app PRIVATE src/behaviors/behavior_key_repeat.c)
   target_sources_ifdef(CONFIG_ZMK_BEHAVIOR_MACRO app PRIVATE src/behaviors/behavior_macro.c)
   target_sources(app PRIVATE src/behaviors/behavior_momentary_layer.c)
+  target_sources(app PRIVATE src/behaviors/behavior_momentary_layer_lock.c)
   target_sources(app PRIVATE src/behaviors/behavior_mod_morph.c)
   target_sources(app PRIVATE src/behaviors/behavior_outputs.c)
   target_sources(app PRIVATE src/behaviors/behavior_toggle_layer.c)
diff --git a/app/dts/behaviors.dtsi b/app/dts/behaviors.dtsi
index 23f2fee2806..2409cf1e370 100644
--- a/app/dts/behaviors.dtsi
+++ b/app/dts/behaviors.dtsi
@@ -7,6 +7,7 @@
 #include <behaviors/gresc.dtsi>
 #include <behaviors/sticky_key.dtsi>
 #include <behaviors/momentary_layer.dtsi>
+#include <behaviors/momentary_layer_lock.dtsi>
 #include <behaviors/toggle_layer.dtsi>
 #include <behaviors/to_layer.dtsi>
 #include <behaviors/reset.dtsi>
diff --git a/app/dts/behaviors/momentary_layer_lock.dtsi b/app/dts/behaviors/momentary_layer_lock.dtsi
new file mode 100644
index 00000000000..e1d492014f1
--- /dev/null
+++ b/app/dts/behaviors/momentary_layer_lock.dtsi
@@ -0,0 +1,16 @@
+/*
+ * Copyright (c) 2023 The ZMK Contributors
+ *
+ * SPDX-License-Identifier: MIT
+ */
+
+/ {
+    behaviors {
+        /omit-if-no-ref/ molock: behavior_momentary_layer_lock {
+            compatible = "zmk,behavior-momentary-layer-lock";
+            label = "MO_LOCK";
+            #binding-cells = <0>;
+            bindings = <&to 0>;
+        };
+    };
+};
diff --git a/app/dts/bindings/behaviors/zmk,behavior-momentary-layer-lock.yaml b/app/dts/bindings/behaviors/zmk,behavior-momentary-layer-lock.yaml
new file mode 100644
index 00000000000..dc7138fb7ea
--- /dev/null
+++ b/app/dts/bindings/behaviors/zmk,behavior-momentary-layer-lock.yaml
@@ -0,0 +1,13 @@
+# Copyright (c) 2023 The ZMK Contributors
+# SPDX-License-Identifier: MIT
+
+description: Momentary layer on press/release behavior
+
+compatible: "zmk,behavior-momentary-layer-lock"
+
+include: zero_param.yaml
+
+properties:
+  bindings:
+    type: phandle-array
+    required: true
diff --git a/app/include/zmk/momentary_layer.h b/app/include/zmk/momentary_layer.h
new file mode 100644
index 00000000000..7511c0b1d3a
--- /dev/null
+++ b/app/include/zmk/momentary_layer.h
@@ -0,0 +1,15 @@
+/*
+ * Copyright (c) 2023 The ZMK Contributors
+ *
+ * SPDX-License-Identifier: MIT
+ */
+
+#pragma once
+
+#include <zmk/keymap.h>
+
+// Locks all active momentary layers so they are not disabled when the key is
+// released.
+//
+// Returns a set of the layers that were locked.
+zmk_keymap_layers_state_t zmk_lock_active_momentary_layers();
\ No newline at end of file
diff --git a/app/src/behaviors/behavior_momentary_layer.c b/app/src/behaviors/behavior_momentary_layer.c
index 0c86e605..6de86d1d 100644
--- a/app/src/behaviors/behavior_momentary_layer.c
+++ b/app/src/behaviors/behavior_momentary_layer.c
@@ -12,32 +12,51 @@
 
 #include <zmk/keymap.h>
 #include <zmk/behavior.h>
+#include <zmk/momentary_layer.h>
 
 LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);
 
 struct behavior_mo_config {};
-struct behavior_mo_data {};
+struct behavior_mo_data {
+    zmk_keymap_layers_state_t active_momentary_layers;
+    zmk_keymap_layers_state_t ignore_on_release;
+};
+
+static const struct behavior_mo_config behavior_mo_config = {};
+static struct behavior_mo_data behavior_mo_data;
+
+zmk_keymap_layers_state_t zmk_lock_active_momentary_layers() {
+    return behavior_mo_data.ignore_on_release = behavior_mo_data.active_momentary_layers;
+}
 
 static int behavior_mo_init(const struct device *dev) { return 0; };
 
 static int mo_keymap_binding_pressed(struct zmk_behavior_binding *binding,
                                      struct zmk_behavior_binding_event event) {
-    LOG_DBG("position %d layer %d", event.position, binding->param1);
-    return zmk_keymap_layer_activate(binding->param1);
+    int layer = binding->param1;
+    LOG_DBG("position %d layer %d", event.position, layer);
+    WRITE_BIT(behavior_mo_data.active_momentary_layers, layer, true);
+    return zmk_keymap_layer_activate(layer);
 }
 
 static int mo_keymap_binding_released(struct zmk_behavior_binding *binding,
                                       struct zmk_behavior_binding_event event) {
-    LOG_DBG("position %d layer %d", event.position, binding->param1);
+    int layer = binding->param1;
+    LOG_DBG("position %d layer %d", event.position, layer);
+    WRITE_BIT(behavior_mo_data.active_momentary_layers, layer, false);
+
+    // If the layer is locked, don't deactivate it. Instead clear the
+    // ignore_on_release flag so the next press/release will.
+    if (behavior_mo_data.ignore_on_release & BIT(layer)) {
+        WRITE_BIT(behavior_mo_data.ignore_on_release, layer, false);
+        return 0;
+    }
+
     return zmk_keymap_layer_deactivate(binding->param1);
 }
 
 static const struct behavior_driver_api behavior_mo_driver_api = {
     .binding_pressed = mo_keymap_binding_pressed, .binding_released = mo_keymap_binding_released};
 
-static const struct behavior_mo_config behavior_mo_config = {};
-
-static struct behavior_mo_data behavior_mo_data;
-
 BEHAVIOR_DT_INST_DEFINE(0, behavior_mo_init, NULL, &behavior_mo_data, &behavior_mo_config,
                         POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT, &behavior_mo_driver_api);
diff --git a/app/src/behaviors/behavior_momentary_layer_lock.c b/app/src/behaviors/behavior_momentary_layer_lock.c
new file mode 100644
index 00000000..5b4eef43
--- /dev/null
+++ b/app/src/behaviors/behavior_momentary_layer_lock.c
@@ -0,0 +1,96 @@
+/*
+ * Copyright (c) 2023 The ZMK Contributors
+ *
+ * SPDX-License-Identifier: MIT
+ */
+
+#define DT_DRV_COMPAT zmk_behavior_momentary_layer_lock
+
+#include <zephyr/device.h>
+#include <drivers/behavior.h>
+#include <zephyr/logging/log.h>
+
+#include <zmk/keymap.h>
+#include <zmk/behavior.h>
+#include <zmk/momentary_layer.h>
+
+LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);
+
+#if DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT)
+
+struct behavior_mo_lock_config {
+    struct zmk_behavior_binding fallback_binding;
+};
+
+struct behavior_mo_lock_data {
+    bool is_fallback_binding_pressed;
+};
+
+static int behavior_mo_lock_init(const struct device *dev) { return 0; };
+
+static int mo_lock_keymap_binding_pressed(struct zmk_behavior_binding *binding,
+                                          struct zmk_behavior_binding_event event) {
+    LOG_DBG("%d molock pressed", event.position);
+
+    zmk_keymap_layers_state_t locked_layers = zmk_lock_active_momentary_layers();
+
+    if (!locked_layers) {
+        LOG_DBG("no layers locked, falling back to %s", binding->behavior_dev);
+
+        const struct device *dev = device_get_binding(binding->behavior_dev);
+        const struct behavior_mo_lock_config *config = dev->config;
+        struct zmk_behavior_binding fallback_binding = config->fallback_binding;
+        struct behavior_mo_lock_data *data = dev->data;
+
+        data->is_fallback_binding_pressed = true;
+        return behavior_keymap_binding_pressed(&fallback_binding, event);
+    } else {
+        LOG_DBG("locked layers: %#08x", locked_layers);
+    }
+
+    return 0;
+}
+
+static int mo_lock_keymap_binding_released(struct zmk_behavior_binding *binding,
+                                           struct zmk_behavior_binding_event event) {
+    LOG_DBG("%d molock released", event.position);
+
+    const struct device *dev = device_get_binding(binding->behavior_dev);
+    struct behavior_mo_lock_data *data = dev->data;
+
+    if (data->is_fallback_binding_pressed) {
+        const struct behavior_mo_lock_config *config = dev->config;
+        struct zmk_behavior_binding fallback_binding = config->fallback_binding;
+
+        data->is_fallback_binding_pressed = false;
+        return behavior_keymap_binding_released(&fallback_binding, event);
+    }
+
+    return 0;
+}
+
+#define KP_INST(n)                                                                                 \
+    static struct behavior_mo_lock_config behavior_mo_lock_config_##n = {                          \
+        .fallback_binding =                                                                        \
+            {                                                                                      \
+                .behavior_dev = DEVICE_DT_NAME(DT_INST_PHANDLE_BY_IDX(n, bindings, 0)),            \
+                .param1 = COND_CODE_0(DT_INST_PHA_HAS_CELL_AT_IDX(n, bindings, 0, param1), (0),    \
+                                      (DT_INST_PHA_BY_IDX(n, bindings, 0, param1))),               \
+                .param2 = COND_CODE_0(DT_INST_PHA_HAS_CELL_AT_IDX(n, bindings, 0, param2), (0),    \
+                                      (DT_INST_PHA_BY_IDX(n, bindings, 0, param))),                \
+            },                                                                                     \
+    };                                                                                             \
+    static struct behavior_mo_lock_data behavior_mo_lock_data_##n;                                 \
+                                                                                                   \
+    BEHAVIOR_DT_INST_DEFINE(n, behavior_mo_lock_init, NULL, &behavior_mo_lock_data_##n,            \
+                            &behavior_mo_lock_config_##n, POST_KERNEL,                             \
+                            CONFIG_KERNEL_INIT_PRIORITY_DEFAULT, &behavior_mo_lock_driver_api);
+
+static const struct behavior_driver_api behavior_mo_lock_driver_api = {
+    .binding_pressed = mo_lock_keymap_binding_pressed,
+    .binding_released = mo_lock_keymap_binding_released,
+};
+
+DT_INST_FOREACH_STATUS_OKAY(KP_INST)
+
+#endif /* DT_HAS_COMPAT_STATUS_OKAY(DT_DRV_COMPAT) */
